{"version":3,"file":"app_assets_modules_github_updatable-content_ts-xxxxxxxxxxxx.js","mappings":"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","sources":["app/assets/modules/github/has-interactions.ts","app/assets/modules/github/history.ts","ui/packages/trusted-types-policies/parse-html.ts","app/assets/modules/github/parse-html.ts","app/assets/modules/github/updatable-content.ts","ui/packages/form-utils/form-utils.ts","ui/packages/form-utils/remote-submit.ts","ui/packages/trusted-types/trusted-types.ts"],"sourcesContent":["import DetailsDialogElement from '@github/details-dialog-element'\nimport {isFormField} from '@github-ui/form-utils'\n\n// Check if container has any user interactions that could be lost if replaced.\n//\n// container - An Element to check for user interactions.\n// ignoreFocusedContainer - A Boolean, `true` to skip the\n// focus check if the container is the focused element. Dirty field and\n// mousedown checks are still performed.\nexport function hasInteractions(\n  container: Element,\n  ignoreFocusedContainer = false,\n  ignoreDirtyFields = false,\n): boolean {\n  return (\n    (!ignoreDirtyFields && hasDirtyFields(container)) ||\n    hasFocus(container, ignoreFocusedContainer) ||\n    hasMousedown(container) ||\n    markedAsDirty(container)\n  )\n}\n\nexport function hasDirtyFields(container: Element): boolean {\n  for (const field of container.querySelectorAll('input, textarea')) {\n    if (field instanceof HTMLInputElement || field instanceof HTMLTextAreaElement) {\n      if (formFieldValueChanged(field)) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nfunction formFieldValueChanged(input: HTMLInputElement | HTMLTextAreaElement): boolean {\n  if (input instanceof HTMLInputElement && (input.type === 'checkbox' || input.type === 'radio')) {\n    if (input.checked !== input.defaultChecked) return true\n  } else {\n    if (input.value !== input.defaultValue) return true\n  }\n  return false\n}\n\nlet stubbedActiveElement: Element | null\n\nexport async function withActiveElement(element: Element, fn: () => unknown): Promise<void> {\n  stubbedActiveElement = element\n  try {\n    await fn()\n  } finally {\n    stubbedActiveElement = null\n  }\n}\n\nfunction getActiveElement(container: Element): Element | null {\n  if (stubbedActiveElement instanceof Element) {\n    return stubbedActiveElement\n  } else if (container && container.ownerDocument && container.ownerDocument.activeElement) {\n    return container.ownerDocument.activeElement\n  }\n  return null\n}\n\nlet latestMousedownTarget: EventTarget | null\nlet latestMouseupTarget: EventTarget | null\n\ndocument.addEventListener(\n  'mousedown',\n  function (event: Event) {\n    latestMousedownTarget = event.target\n  },\n  true,\n)\n\ndocument.addEventListener(\n  'mouseup',\n  function (event: Event) {\n    latestMousedownTarget = null\n    latestMouseupTarget = event.target\n  },\n  true,\n)\n\ndocument.addEventListener(\n  'dragend',\n  function () {\n    // Drag and drop does not result in a mouseup event.\n    latestMousedownTarget = null\n  },\n  true,\n)\n\nfunction hasFocus(container: Element, ignoreFocusedContainer: boolean): boolean {\n  const activeElement = getActiveElement(container)\n  if (activeElement === null) return false\n  if (ignoreFocusedContainer && activeElement === container) return false\n\n  // Updatable container hasFocus if one of the following is true:\n  // 1. Focus target is both a form field AND the update target\n  const formFieldFocused = activeElement === container && isFormField(activeElement)\n  if (formFieldFocused) return true\n  // 2. Focus target is relevent (ie not a UPDATABLE_INTERACTIVE_TARGET)\n  //\n  // We consider it safe to update content if the focused element is a button or a link, as\n  // both likely only trigger transient actions\n  const focusTargetIsRelevent = container.contains(activeElement) && !activeElementIsSafe(activeElement)\n  if (focusTargetIsRelevent) return true\n\n  // 3. The last clicked element is an open details summary\n  const interactingWithOpenDetails =\n    latestMouseupTarget instanceof Element &&\n    container.contains(latestMouseupTarget) &&\n    !!latestMouseupTarget.closest('details[open] > summary')\n  return interactingWithOpenDetails\n}\n\nconst UPDATABLE_INTERACTIVE_TARGET = 'a[href], button'\n\nfunction activeElementIsSafe(activeElement: Element): boolean {\n  if (activeElement instanceof DetailsDialogElement) return true\n\n  const isLinkOrButton = activeElement instanceof HTMLAnchorElement || activeElement instanceof HTMLButtonElement\n  const isInsideTaskItem = activeElement.parentElement?.classList.contains('task-list-item')\n  if (isLinkOrButton && isInsideTaskItem) {\n    return true\n  }\n\n  if (!(latestMouseupTarget instanceof Element)) return false\n  const updatableActiveElement = activeElement.closest(UPDATABLE_INTERACTIVE_TARGET)\n  if (!updatableActiveElement) return false\n  const updatableMouseupElement = latestMouseupTarget.closest(UPDATABLE_INTERACTIVE_TARGET)\n  return updatableActiveElement === updatableMouseupElement\n}\n\nfunction hasMousedown(container: Element): boolean {\n  return container.matches(':active:enabled') || container.contains(latestMousedownTarget as Node | null)\n}\n\nfunction markedAsDirty(container: Element): boolean {\n  return container.closest('.is-dirty') || container.querySelector('.is-dirty') ? true : false\n}\n","let sessionHistoryEntries: Array<{url: string; state: unknown}> = []\nlet sessionHistoryOffset = 0\nlet state: State\n\ntype State = {\n  _id: number\n  turbo?: {\n    restorationIdentifier: string\n  }\n}\n\n/*\n * Array of history entries.\n *\n * Example:\n * {\n *   0: {\n *     url: \"/\",\n *     state: { ... }.\n *   },\n *   1: {\n *     url: \"/github/github/issues/123\",\n *     state: { ... }.\n *   },\n *   2: {\n *     url: \"/github/github/issues/123#comment-4\",\n *     state: { ... }.\n *   }.\n *  }.\n */\n\nexport function getState(): State {\n  return state\n}\n\nfunction safeGetHistory() {\n  try {\n    // Clamp history.length to 0<->9007199254740991 (Number.MAX_SAFE_INTEGER isn't supported in IE)\n    return Math.min(Math.max(0, history.length) || 0, 9007199254740991)\n  } catch (e) {\n    return 0\n  }\n}\n\nfunction initializeState(): State {\n  const newState = {_id: new Date().getTime(), ...history.state}\n  setState(newState)\n  return newState\n}\n\n// Current index into history entries stack.\nfunction position(): number {\n  return safeGetHistory() - 1 + sessionHistoryOffset\n}\n\nfunction setState(newState: State) {\n  state = newState\n\n  // Update entry at current position\n  const url = location.href\n  sessionHistoryEntries[position()] = {url, state}\n\n  // Trim entries to match history size\n  sessionHistoryEntries.length = safeGetHistory()\n\n  // Emit public statechange\n  window.dispatchEvent(new CustomEvent('statechange', {bubbles: false, cancelable: false}))\n}\n\n// Generate unique id for state object.\n//\n// Use a timestamp instead of a counter since ids should still be unique\n// across page loads.\nfunction uniqueId(): number {\n  return new Date().getTime()\n}\n\n// Indirection for history.pushState to support tracking URL changes.\n//\n// Would be great if there was a standard window.addEventListener('statechange') event.\nexport function pushState(oldState: State | null, title: string, url: string) {\n  // pushState drops any forward history entries\n  sessionHistoryOffset = 0\n  const newState = {_id: uniqueId(), ...oldState}\n  history.pushState(newState, title, url)\n  setState(newState)\n}\n\n// Indirection for history.replaceState to support tracking URL changes.\n//\n// Would be great if there was a standard window.addEventListener('statechange') event.\nexport function replaceState(oldState: Record<string, unknown> | null, title: string, url: string) {\n  const newState = {...getState(), ...oldState}\n  history.replaceState(newState, title, url)\n  setState(newState)\n}\n\nstate = initializeState()\n\nwindow.addEventListener(\n  'popstate',\n  function onPopstate(event: PopStateEvent) {\n    const currentState: State = event.state\n\n    if (!currentState || (!currentState._id && !currentState.turbo?.restorationIdentifier)) {\n      // Unmanaged state in history entries\n      // Or could be a hashchange pop, ignore and let hashchange handle it\n      return\n    }\n\n    // Each state has a unique restorationIdentifier provided by Turbo. We compare the id\n    // to see if we are going backwards or forwards.\n    const id = currentState.turbo?.restorationIdentifier\n    const restoreId = (sessionHistoryEntries[position() - 1]?.state as State)?.turbo?.restorationIdentifier\n\n    if (restoreId === id) {\n      sessionHistoryOffset--\n    } else {\n      sessionHistoryOffset++\n    }\n\n    setState(currentState)\n  },\n  true,\n)\n\nlet turboAction: string\n\nwindow.addEventListener('turbo:visit', event => {\n  if (!(event instanceof CustomEvent)) return\n\n  turboAction = event.detail.action\n})\n\n// Listen turbo navigations to reset the `sessionHistoryOffset` in case we are doing a page load\n// instead of poping a state from the history stack.\nwindow.addEventListener('turbo:load', () => {\n  if (turboAction === 'restore') return\n\n  sessionHistoryOffset = 0\n  // Add turbo navigations to the state stack, so we can keep it complete without `empty` entries.\n  replaceState(history.state, '', '')\n})\n\nwindow.addEventListener(\n  'hashchange',\n  function onHashchange() {\n    if (safeGetHistory() > sessionHistoryEntries.length) {\n      // Forward navigation\n      const newState = {_id: uniqueId()}\n      history.replaceState(newState, '', location.href)\n      setState(newState)\n    }\n  },\n  true,\n)\n\n// We need to reset our history state on full-page loads to prevent our state from getting out of sync with the browser's history stack.\nwindow.addEventListener('pageshow', () => {\n  sessionHistoryEntries = []\n  sessionHistoryOffset = 0\n})\n","import {ghTrustedTypes} from '@github-ui/trusted-types'\n\n// This is a temporary policy to allow us to migrate to Trusted Types without breaking existing code.\nexport const temporaryPermissiveParseHTMLPolicy = ghTrustedTypes.createPolicy('parse-html-no-op', {\n  createHTML: (s: string) => s,\n})\n","import {temporaryPermissiveParseHTMLPolicy} from '@github-ui/trusted-types-policies/parse-html'\n\nexport function parseHTML(document: Document, html: string): DocumentFragment {\n  const template = document.createElement('template')\n  template.innerHTML = temporaryPermissiveParseHTMLPolicy.createHTML(html)\n  return document.importNode(template.content, true)\n}\n","import {hasInteractions} from './has-interactions'\n// eslint-disable-next-line no-restricted-imports\nimport {observe} from '@github/selector-observer'\nimport {parseHTML} from './parse-html'\nimport {preserveAnchorNodePosition} from 'scroll-anchoring'\nimport {replaceState} from './history'\n\nconst pendingRequests = new WeakMap<HTMLElement, AbortController>()\nconst staleRecords: {[key: string]: string} = {}\n\n// Wrapper around `window.location.reload()` that forceably cleans out the\n// `staleRecords` state associated with the entry at the top of the history\n// stack before reloading.\nexport function reload() {\n  for (const key of Object.keys(staleRecords)) {\n    delete staleRecords[key]\n  }\n  const stateObject = history.state || {}\n  stateObject.staleRecords = staleRecords\n  replaceState(stateObject, '', location.href)\n  window.location.reload()\n}\n\n// Associates the `staleRecords` object, if it contains any entries, with the\n// entry at top of the history stack.\nexport function registerStaleRecords() {\n  if (Object.keys(staleRecords).length > 0) {\n    const stateObject = history.state || {}\n    stateObject.staleRecords = staleRecords\n    replaceState(stateObject, '', location.href)\n  }\n}\n\n// Fetch and replace container with its data-url.\n//\n// This replacement uses conservative checks to safely replace the element.\n// If a user is interacting with any element within the container, the\n// replacement will be aborted.\nexport async function updateContent(el: HTMLElement): Promise<void> {\n  if (pendingRequests.get(el)) return\n\n  const retainFocus = el.hasAttribute('data-retain-focus')\n  const url = el.getAttribute('data-url')\n  if (!url) throw new Error('could not get url')\n  const controller = new AbortController()\n  pendingRequests.set(el, controller)\n\n  try {\n    const response = await fetch(url, {\n      signal: controller.signal,\n      headers: {\n        Accept: 'text/html',\n        'X-Requested-With': 'XMLHttpRequest',\n      },\n    })\n    if (!response.ok) return\n    const data = await response.text()\n    if (hasInteractions(el, retainFocus)) {\n      // eslint-disable-next-line no-console\n      console.warn('Failed to update content with interactions', el)\n      return\n    }\n    staleRecords[url] = data\n    return replace(el, data, retainFocus)\n  } catch {\n    // Ignore failed request.\n  } finally {\n    pendingRequests.delete(el)\n  }\n}\n\n// Abort any in-flight replacements and replace element without any interaction checks.\nexport async function replaceContent(el: HTMLElement, data: string, wasStale = false): Promise<void> {\n  const controller = pendingRequests.get(el)\n  controller?.abort()\n\n  const updatable = el.closest('.js-updatable-content[data-url], .js-updatable-content [data-url]')\n  if (!wasStale && updatable && updatable === el) {\n    staleRecords[updatable.getAttribute('data-url') || ''] = data\n  }\n  return replace(el, data)\n}\n\nfunction replace(el: HTMLElement, data: string, retainFocus = false): Promise<void> {\n  return preserveAnchorNodePosition(document, () => {\n    const newContent = parseHTML(document, data.trim())\n    const elementToRefocus =\n      retainFocus && el.ownerDocument && el === el.ownerDocument.activeElement ? newContent.querySelector('*') : null\n\n    const detailsIds = Array.from(el.querySelectorAll('details[open][id]')).map(element => element.id)\n    if (el.tagName === 'DETAILS' && el.id && el.hasAttribute('open')) detailsIds.push(el.id)\n\n    // Check the elements we are about replace to see if we want to preserve the scroll position of any of them\n    for (const preserveElement of el.querySelectorAll('.js-updatable-content-preserve-scroll-position')) {\n      const id = preserveElement.getAttribute('data-updatable-content-scroll-position-id') || ''\n      heights.set(id, preserveElement.scrollTop)\n    }\n\n    for (const id of detailsIds) {\n      const details = newContent.querySelector(`#${id}`)\n      if (details) details.setAttribute('open', '')\n    }\n\n    el.replaceWith(newContent)\n    if (elementToRefocus instanceof HTMLElement) {\n      elementToRefocus.focus()\n    }\n  })\n}\n\nconst heights = new Map()\nobserve('.js-updatable-content-preserve-scroll-position', {\n  constructor: HTMLElement,\n  add(el) {\n    // When element is added to the DOM, check the map for the last scroll position we have on record for it.\n    const id = el.getAttribute('data-updatable-content-scroll-position-id')\n    if (!id) return\n    const height = heights.get(id)\n    if (height == null) return\n\n    el.scrollTop = height\n  },\n})\n","import {persistSubmitButtonValue} from './remote-submit'\n\ntype TextField = HTMLInputElement | HTMLTextAreaElement\ntype Button = HTMLInputElement | HTMLButtonElement\n\nfunction fire(target: HTMLElement, name: string, cancelable: boolean): boolean {\n  return target.dispatchEvent(\n    new CustomEvent(name, {\n      bubbles: true,\n      cancelable,\n    }),\n  )\n}\n\n// Submit a form while ensuring that `submit` event is also triggered.\n//\n// Calling native `form.submit()` method immediately submits the form without triggering the `submit` event.\n// As a result, code that wants to hook into form submits would never execute.\n//\n// This method first triggers the `submit` event and, if that event wasn't `preventDefault`d, submits the\n// form natively.\nexport function requestSubmit(form: HTMLFormElement, submitter?: Button) {\n  if (submitter) {\n    checkButtonValidity(form, submitter)\n    persistSubmitButtonValue(submitter)\n  }\n  if (fire(form, 'submit', true)) {\n    form.submit()\n  }\n}\n\n// Check submitter validity for form.requestSubmit compatibility.\n// See https://html.spec.whatwg.org/#dom-form-requestsubmit.\nfunction checkButtonValidity(form: HTMLFormElement, submitter: Button) {\n  if (!(form instanceof HTMLFormElement)) throw new TypeError('The specified element is not of type HTMLFormElement.')\n  if (!(submitter instanceof HTMLElement)) throw new TypeError('The specified element is not of type HTMLElement.')\n  if (submitter.type !== 'submit') throw new TypeError('The specified element is not a submit button.')\n  if (!form || form !== submitter.form) throw new Error('The specified element is not owned by the form element.')\n}\n\n// Set a form field value while ensuring that `change` event is also triggered.\n//\n// Having the `change` event fire is important for various behaviors to react, such as form validation.\nexport function changeValue(input: TextField, value: string | boolean) {\n  if (typeof value === 'boolean') {\n    if (input instanceof HTMLInputElement) {\n      input.checked = value\n    } else {\n      throw new TypeError('only checkboxes can be set to boolean value')\n    }\n  } else {\n    if (input.type === 'checkbox') {\n      throw new TypeError(\"checkbox can't be set to string value\")\n    } else {\n      input.value = value\n    }\n  }\n  fire(input, 'change', false)\n}\n\n// Fill multiple form fields by item name.\nexport function fillFormValues(form: HTMLFormElement, fields: {[key: string]: string}) {\n  for (const name in fields) {\n    const value = fields[name]\n    const element = form.elements.namedItem(name)\n\n    if (element instanceof HTMLInputElement) {\n      element.value = value!\n    } else if (element instanceof HTMLTextAreaElement) {\n      element.value = value!\n    }\n  }\n}\n\n// Test if element is a form field.\nexport function isFormField(element: Node): boolean {\n  if (!(element instanceof HTMLElement)) {\n    return false\n  }\n\n  const name = element.nodeName.toLowerCase()\n  const type = (element.getAttribute('type') || '').toLowerCase()\n  return (\n    name === 'select' ||\n    name === 'textarea' ||\n    (name === 'input' && type !== 'submit' && type !== 'reset') ||\n    element.isContentEditable\n  )\n}\n\nfunction searchParamsFromFormData(formData: FormData): URLSearchParams {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new URLSearchParams(formData as any)\n}\n\n// Get a `?` search string for a URL for a GET form, using its `action` attribute as well as its other fields.\nexport function combineGetFormSearchParams(formAction: URL, formData: FormData): string {\n  const allSearchParams = new URLSearchParams(formAction.search)\n  const searchParamsFromInputs = searchParamsFromFormData(formData)\n  for (const [key, value] of searchParamsFromInputs) {\n    allSearchParams.append(key, value)\n  }\n  return allSearchParams.toString()\n}\n\n// Serialize form data into string.\nexport function serialize(form: HTMLFormElement): string {\n  return searchParamsFromFormData(new FormData(form)).toString()\n}\n","// Emulates submit button submission values by inserting a hidden input to the form.\n//\n// Submit events can be triggerd in the following ways:\n// - User clicks on a submit button.\n// - User press Enter when focusing on a form field; also known as \"implicit submission\".\n// - Programmatically via requestSubmit helper.\n//\n// On GitHub.com, the submission is either handled by the browser or remoteForm.\n//\n// For submissions triggered by user actions, the name and value of the clicked submit button (also known as\n// \"the submitter\") is passed along in the request, and can be programmatically retrieved with FormData.entries().\n//\n// However, this value will be lost in the following cases:\n// - 1. When the submitter button is disabled, most commonly by [data-disable-with].\n// - 2. When submitting via requestSubmit (from form.js), because the submission does not originated from a submitter.\n// - 3. When submitting with remoteForm, because FormData(form).entries() does not know about the submitter. In Safari\n// the submitter is known during the submission steps, but this behavior is not supported in any other browsers.\n//\n// @see {@link https://github.com/github/form-data-entries/pull/7}.\n//\n// For the exact workarounds, refer to ./form.js and ./remote.js.\nexport function persistSubmitButtonValue(button: HTMLButtonElement | HTMLInputElement) {\n  const form = button.closest('form')\n  if (!(form instanceof HTMLFormElement)) {\n    return\n  }\n\n  let input = findPersistedSubmitButtonValue(form)\n\n  if (button.name) {\n    const defaultValue = button.matches('input[type=submit]') ? 'Submit' : ''\n    const value = button.value || defaultValue\n    if (!input) {\n      input = document.createElement('input')\n      input.type = 'hidden'\n      input.classList.add('js-submit-button-value')\n      form.prepend(input)\n    }\n    input.name = button.name\n    input.value = value\n  } else if (input) {\n    input.remove()\n  }\n}\n\nexport function findPersistedSubmitButtonValue(form: HTMLFormElement): HTMLInputElement | null {\n  const input = form.querySelector('input.js-submit-button-value')\n  return input instanceof HTMLInputElement ? input : null\n}\n","import {ssrSafeDocument} from '@github-ui/ssr-utils'\n\n/*\n * Tinyfill for trusted types\n */\n\ninterface GHTrustedTypePolicyOptions {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  createHTML: (input: string, ...args: any[]) => string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  createScript: (input: string, ...args: any[]) => string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  createScriptURL: (input: string, ...args: any[]) => string\n}\n\ninterface GHTrustedTypePolicyWithName extends GHTrustedTypePolicyOptions {\n  name: string\n}\n\nfunction unimplemented(functionName: string) {\n  return () => {\n    throw new TypeError(`The policy does not implement the function ${functionName}`)\n  }\n}\n\nconst fallbacks = {\n  createHTML: unimplemented('createHTML'),\n  createScript: unimplemented('createScript'),\n  createScriptURL: unimplemented('createScriptURL'),\n}\n\nconst tinyfill = {\n  createPolicy: (name: string, rules: Partial<GHTrustedTypePolicyOptions>): GHTrustedTypePolicyWithName => ({\n    name,\n    ...fallbacks,\n    ...rules,\n  }),\n}\n\ninterface GlobalThisWithMaybeTrustedTypes {\n  trustedTypes?: typeof tinyfill\n}\n\nexport const ghTrustedTypes = (globalThis as GlobalThisWithMaybeTrustedTypes).trustedTypes ?? tinyfill\n\n// This export is only for testing. Do not import in production code.\nexport const tinyfillForTesting = tinyfill\n\n/*\n *\n * This is a temporary warning to indicate to hubbers that the following errors are expected and safe to ignore.\n *\n */\nlet hasWarnedHubberAboutTrustedTypes = false\n\nssrSafeDocument?.addEventListener('securitypolicyviolation', (e: SecurityPolicyViolationEvent) => {\n  if (e.violatedDirective === 'require-trusted-types-for' && !hasWarnedHubberAboutTrustedTypes) {\n    // eslint-disable-next-line no-console\n    console.warn(`Hi fellow Hubber!\n    You're probably seeing a Report Only Trusted Types error near this message. This is intended behaviour, staff-only,\n    does not impact application control flow, and is used solely for statistic collection. Unfortunately we\n    can't gather these statistics without adding the above warnings to your console. Sorry about that!\n    Feel free to drop by #pse-architecture if you have any additional questions about Trusted Types or CSP.`)\n    hasWarnedHubberAboutTrustedTypes = true\n  }\n})\n"],"names":["stubbedActiveElement","latestMousedownTarget","latestMouseupTarget","hasInteractions","container","ignoreFocusedContainer","ignoreDirtyFields","hasDirtyFields","hasFocus","hasMousedown","markedAsDirty","field","querySelectorAll","HTMLInputElement","HTMLTextAreaElement","formFieldValueChanged","input","type","checked","defaultChecked","value","defaultValue","getActiveElement","Element","ownerDocument","activeElement","formFieldFocused","isFormField","focusTargetIsRelevent","contains","activeElementIsSafe","interactingWithOpenDetails","closest","document","addEventListener","event","target","UPDATABLE_INTERACTIVE_TARGET","DetailsDialogElement","isLinkOrButton","HTMLAnchorElement","HTMLButtonElement","isInsideTaskItem","parentElement","classList","updatableActiveElement","updatableMouseupElement","matches","querySelector","state","turboAction","sessionHistoryEntries","sessionHistoryOffset","getState","safeGetHistory","Math","min","max","history","length","e","position","setState","newState","url","location","href","window","dispatchEvent","CustomEvent","bubbles","cancelable","uniqueId","Date","getTime","pushState","oldState","title","_id","replaceState","initializeState","currentState","turbo","restorationIdentifier","id","restoreId","detail","action","temporaryPermissiveParseHTMLPolicy","ghTrustedTypes","createHTML","s","parseHTML","html","template","createElement","innerHTML","importNode","content","pendingRequests","WeakMap","staleRecords","reload","key","Object","keys","stateObject","registerStaleRecords","updateContent","el","get","retainFocus","hasAttribute","getAttribute","controller","AbortController","set","response","fetch","signal","headers","Accept","ok","data","text","console","warn","replace","delete","replaceContent","wasStale","abort","updatable","preserveAnchorNodePosition","newContent","trim","elementToRefocus","detailsIds","Array","from","map","element","preserveElement","tagName","push","heights","scrollTop","details","setAttribute","replaceWith","HTMLElement","focus","Map","observe","constructor","add","height","fire","name","requestSubmit","form","submitter","checkButtonValidity","persistSubmitButtonValue","submit","HTMLFormElement","changeValue","fillFormValues","fields","elements","namedItem","nodeName","toLowerCase","isContentEditable","searchParamsFromFormData","formData","URLSearchParams","combineGetFormSearchParams","formAction","allSearchParams","search","searchParamsFromInputs","append","toString","serialize","FormData","button","findPersistedSubmitButtonValue","prepend","remove","unimplemented","functionName","fallbacks","createScript","createScriptURL","tinyfill","createPolicy","rules","trustedTypes","hasWarnedHubberAboutTrustedTypes","ssrSafeDocument","violatedDirective"],"sourceRoot":""}