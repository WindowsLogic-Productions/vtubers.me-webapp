{"version":3,"file":"vendors-node_modules_github_mini-throttle_dist_index_js-node_modules_github_alive-client_dist-bf5aa2-xxxxxxxxxxxx.js","mappings":"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","sources":["node_modules/@github/mini-throttle/dist/index.js","node_modules/@github/alive-client/dist/alive-session.js","node_modules/@github/alive-client/dist/eventloop-tasks.js","node_modules/@github/alive-client/dist/iterables.js","node_modules/@github/alive-client/dist/presence-metadata.js","node_modules/@github/alive-client/dist/presence.js","node_modules/@github/alive-client/dist/subscription-set.js","node_modules/@github/alive-client/dist/topic.js","node_modules/@github/multimap/dist/index.js","node_modules/@github/stable-socket/dist/index.js"],"sourcesContent":["export function throttle(callback, wait = 0, { start = true, middle = true, once = false } = {}) {\n    let last = 0;\n    let timer;\n    let cancelled = false;\n    function fn(...args) {\n        if (cancelled)\n            return;\n        const delta = Date.now() - last;\n        last = Date.now();\n        if (start) {\n            start = false;\n            callback.apply(this, args);\n            if (once)\n                fn.cancel();\n        }\n        else if ((middle && delta < wait) || !middle) {\n            clearTimeout(timer);\n            timer = setTimeout(() => {\n                last = Date.now();\n                callback.apply(this, args);\n                if (once)\n                    fn.cancel();\n            }, !middle ? wait : wait - delta);\n        }\n    }\n    fn.cancel = () => {\n        clearTimeout(timer);\n        cancelled = true;\n    };\n    return fn;\n}\nexport function debounce(callback, wait = 0, { start = false, middle = false, once = false } = {}) {\n    return throttle(callback, wait, { start, middle, once });\n}\n","import { AlivePresence, getPresenceKey, isPresenceChannel } from './presence.js';\nimport { IDLE_METADATA_KEY, PresenceMetadataSet } from './presence-metadata.js';\nimport { StableSocket } from '@github/stable-socket';\nimport { SubscriptionSet } from './subscription-set.js';\nimport { eachSlice } from './iterables.js';\nimport { retry } from './eventloop-tasks.js';\nvar SocketDisconnectReasons;\n(function (SocketDisconnectReasons) {\n    SocketDisconnectReasons[\"Deploy\"] = \"Alive Redeploy\";\n    SocketDisconnectReasons[\"Reconnect\"] = \"Alive Reconnect\";\n})(SocketDisconnectReasons || (SocketDisconnectReasons = {}));\nfunction generatePresenceId() {\n    return `${Math.round(Math.random() * (Math.pow(2, 31) - 1))}_${Math.round(Date.now() / 1000)}`;\n}\nfunction getUserIdFromSocketUrl(url) {\n    const match = url.match(/\\/u\\/(\\d+)\\/ws/);\n    return match ? +match[1] : 0;\n}\nexport class AliveSession {\n    constructor(url, getUrl, inSharedWorker, notify, maxReconnectBackoff = 600000) {\n        this.url = url;\n        this.getUrl = getUrl;\n        this.inSharedWorker = inSharedWorker;\n        this.notify = notify;\n        this.maxReconnectBackoff = maxReconnectBackoff;\n        this.subscriptions = new SubscriptionSet();\n        this.state = 'online';\n        this.retrying = null;\n        this.connectionCount = 0;\n        this.presence = new AlivePresence();\n        this.presenceMetadata = new PresenceMetadataSet();\n        this.intentionallyDisconnected = false;\n        this.lastCameOnline = 0;\n        this.userId = getUserIdFromSocketUrl(url);\n        this.presenceId = generatePresenceId();\n        this.presenceKey = getPresenceKey(this.userId, this.presenceId);\n        this.socket = this.connect();\n    }\n    subscribe(subscriptions) {\n        const added = this.subscriptions.add(...subscriptions);\n        this.sendSubscribe(added);\n        for (const subscription of subscriptions) {\n            const channel = subscription.topic.name;\n            if (!isPresenceChannel(channel)) {\n                continue;\n            }\n            this.notifyCachedPresence(subscription.subscriber, channel);\n        }\n    }\n    unsubscribe(subscriptions) {\n        const removed = this.subscriptions.delete(...subscriptions);\n        this.sendUnsubscribe(removed);\n    }\n    unsubscribeAll(...subscribers) {\n        const removed = this.subscriptions.drain(...subscribers);\n        this.sendUnsubscribe(removed);\n        const updatedPresenceChannels = this.presenceMetadata.removeSubscribers(subscribers);\n        this.sendPresenceMetadataUpdate(updatedPresenceChannels);\n    }\n    requestPresence(subscriber, channels) {\n        for (const channel of channels) {\n            this.notifyCachedPresence(subscriber, channel);\n        }\n    }\n    notifyCachedPresence(subscriber, channel) {\n        const presenceItems = this.presence.getChannelItems(channel);\n        if (presenceItems.length === 0) {\n            return;\n        }\n        this.notifyPresenceChannel(channel, presenceItems);\n    }\n    updatePresenceMetadata(metadataUpdates) {\n        const updatedChannels = new Set();\n        for (const update of metadataUpdates) {\n            this.presenceMetadata.setMetadata(update);\n            updatedChannels.add(update.channelName);\n        }\n        this.sendPresenceMetadataUpdate(updatedChannels);\n    }\n    sendPresenceMetadataUpdate(channelNames) {\n        if (!channelNames.size) {\n            return;\n        }\n        const topics = [];\n        for (const channelName of channelNames) {\n            const topic = this.subscriptions.topic(channelName);\n            if (topic) {\n                topics.push(topic);\n            }\n        }\n        this.sendSubscribe(topics);\n    }\n    online() {\n        var _a;\n        this.lastCameOnline = Date.now();\n        this.state = 'online';\n        (_a = this.retrying) === null || _a === void 0 ? void 0 : _a.abort();\n        this.socket.open();\n    }\n    offline() {\n        var _a;\n        this.state = 'offline';\n        (_a = this.retrying) === null || _a === void 0 ? void 0 : _a.abort();\n        this.socket.close();\n    }\n    shutdown() {\n        if (this.inSharedWorker) {\n            self.close();\n        }\n    }\n    get reconnectWindow() {\n        const wasRecentlyOffline = Date.now() - this.lastCameOnline < 60 * 1000;\n        if (this.connectionCount === 0 || this.intentionallyDisconnected || wasRecentlyOffline) {\n            return 0;\n        }\n        return 10 * 1000;\n    }\n    socketDidOpen() {\n        this.intentionallyDisconnected = false;\n        this.connectionCount++;\n        this.socket.url = this.getUrlWithPresenceId();\n        this.sendSubscribe(this.subscriptions.topics());\n    }\n    socketDidClose(socket, code, reason) {\n        if (this.redeployEarlyReconnectTimeout !== undefined) {\n            clearTimeout(this.redeployEarlyReconnectTimeout);\n        }\n        if (reason === \"Alive Reconnect\") {\n            this.intentionallyDisconnected = true;\n        }\n        else if (reason === \"Alive Redeploy\") {\n            this.intentionallyDisconnected = true;\n            const reconnectDelayMinutes = 3 + Math.random() * 22;\n            const reconnectDelay = reconnectDelayMinutes * 60 * 1000;\n            this.redeployEarlyReconnectTimeout = setTimeout(() => {\n                this.intentionallyDisconnected = true;\n                this.socket.close(1000, 'Alive Redeploy Early Client Reconnect');\n            }, reconnectDelay);\n        }\n    }\n    socketDidFinish() {\n        if (this.state === 'offline')\n            return;\n        this.reconnect();\n    }\n    socketDidReceiveMessage(_, message) {\n        const payload = JSON.parse(message);\n        switch (payload.e) {\n            case 'ack': {\n                this.handleAck(payload);\n                break;\n            }\n            case 'msg': {\n                this.handleMessage(payload);\n                break;\n            }\n        }\n    }\n    handleAck(ack) {\n        for (const topic of this.subscriptions.topics()) {\n            topic.offset = ack.off;\n        }\n    }\n    handleMessage(msg) {\n        const channel = msg.ch;\n        const topic = this.subscriptions.topic(channel);\n        if (!topic)\n            return;\n        topic.offset = msg.off;\n        if ('e' in msg.data) {\n            const presenceItems = this.presence.handleMessage(channel, msg.data);\n            this.notifyPresenceChannel(channel, presenceItems);\n            return;\n        }\n        if (!msg.data.wait)\n            msg.data.wait = 0;\n        this.notify(this.subscriptions.subscribers(channel), {\n            channel,\n            type: 'message',\n            data: msg.data\n        });\n    }\n    notifyPresenceChannel(channel, presenceItems) {\n        var _a, _b;\n        const userPresenceById = new Map();\n        for (const presenceItem of presenceItems) {\n            const { userId, metadata, presenceKey } = presenceItem;\n            const userPresence = userPresenceById.get(userId) || { userId, isOwnUser: userId === this.userId, metadata: [] };\n            if (presenceKey === this.presenceKey) {\n                continue;\n            }\n            for (const data of metadata) {\n                if (IDLE_METADATA_KEY in data) {\n                    if (userPresence.isIdle !== false) {\n                        userPresence.isIdle = Boolean(data[IDLE_METADATA_KEY]);\n                    }\n                    continue;\n                }\n                userPresence.metadata.push(data);\n            }\n            userPresenceById.set(userId, userPresence);\n        }\n        for (const subscriber of this.subscriptions.subscribers(channel)) {\n            const userId = this.userId;\n            const otherUsers = Array.from(userPresenceById.values()).filter(user => user.userId !== userId);\n            const ownUserRemoteMetadata = (_b = (_a = userPresenceById.get(this.userId)) === null || _a === void 0 ? void 0 : _a.metadata) !== null && _b !== void 0 ? _b : [];\n            const ownUserLocalMetadata = this.presenceMetadata.getChannelMetadata(channel, {\n                subscriber,\n                markAllAsLocal: !this.inSharedWorker\n            });\n            this.notify([subscriber], {\n                channel,\n                type: 'presence',\n                data: [\n                    {\n                        userId,\n                        isOwnUser: true,\n                        metadata: [...ownUserRemoteMetadata, ...ownUserLocalMetadata]\n                    },\n                    ...otherUsers\n                ]\n            });\n        }\n    }\n    async reconnect() {\n        if (this.retrying)\n            return;\n        try {\n            this.retrying = new AbortController();\n            const url = await retry(this.getUrl, Infinity, this.maxReconnectBackoff, this.retrying.signal);\n            if (url) {\n                this.url = url;\n                this.socket = this.connect();\n            }\n            else {\n                this.shutdown();\n            }\n        }\n        catch (e) {\n            if (e.name !== 'AbortError')\n                throw e;\n        }\n        finally {\n            this.retrying = null;\n        }\n    }\n    getUrlWithPresenceId() {\n        const liveUrl = new URL(this.url, self.location.origin);\n        liveUrl.searchParams.set('shared', this.inSharedWorker.toString());\n        liveUrl.searchParams.set('p', `${this.presenceId}.${this.connectionCount}`);\n        return liveUrl.toString();\n    }\n    connect() {\n        const socket = new StableSocket(this.getUrlWithPresenceId(), this, { timeout: 4000, attempts: 7 });\n        socket.open();\n        return socket;\n    }\n    sendSubscribe(topics) {\n        const entries = Array.from(topics);\n        for (const slice of eachSlice(entries, 25)) {\n            const subscribe = {};\n            for (const topic of slice) {\n                if (isPresenceChannel(topic.name)) {\n                    subscribe[topic.signed] = JSON.stringify(this.presenceMetadata.getChannelMetadata(topic.name));\n                }\n                else {\n                    subscribe[topic.signed] = topic.offset;\n                }\n            }\n            this.socket.send(JSON.stringify({ subscribe }));\n        }\n    }\n    sendUnsubscribe(topics) {\n        const signed = Array.from(topics, t => t.signed);\n        for (const slice of eachSlice(signed, 25)) {\n            this.socket.send(JSON.stringify({ unsubscribe: slice }));\n        }\n        for (const topic of topics) {\n            if (isPresenceChannel(topic.name)) {\n                this.presence.clearChannel(topic.name);\n            }\n        }\n    }\n}\n","function whenAborted(signal) {\n    return new Promise((resolve, reject) => {\n        const error = new Error('aborted');\n        error.name = 'AbortError';\n        if (signal.aborted) {\n            reject(error);\n        }\n        else {\n            signal.addEventListener('abort', () => reject(error));\n        }\n    });\n}\nexport async function wait(ms, signal) {\n    let id;\n    const done = new Promise(resolve => {\n        id = self.setTimeout(resolve, ms);\n    });\n    if (!signal)\n        return done;\n    try {\n        await Promise.race([done, whenAborted(signal)]);\n    }\n    catch (e) {\n        self.clearTimeout(id);\n        throw e;\n    }\n}\nfunction rand(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\nexport async function retry(fn, attempts, maxDelay = Infinity, signal) {\n    const aborted = signal ? whenAborted(signal) : null;\n    for (let i = 0; i < attempts; i++) {\n        try {\n            const op = aborted ? Promise.race([fn(), aborted]) : fn();\n            return await op;\n        }\n        catch (e) {\n            if (e.name === 'AbortError')\n                throw e;\n            if (i === attempts - 1)\n                throw e;\n            const ms = Math.pow(2, i) * 1000;\n            const vary = rand(ms * 0.1);\n            await wait(Math.min(maxDelay, ms + vary), signal);\n        }\n    }\n    throw new Error('retry failed');\n}\n","export function* eachSlice(values, size) {\n    for (let i = 0; i < values.length; i += size) {\n        yield values.slice(i, i + size);\n    }\n}\n","export const IDLE_METADATA_KEY = '_i';\nfunction markMetadataAsLocal(metadata) {\n    return Object.assign(Object.assign({}, metadata), { isLocal: true });\n}\nclass PresenceMetadataForChannel {\n    constructor() {\n        this.subscriberMetadata = new Map();\n    }\n    setMetadata(subscriber, value) {\n        this.subscriberMetadata.set(subscriber, value);\n    }\n    removeSubscribers(subscribers) {\n        let found = false;\n        for (const subscriber of subscribers) {\n            found = this.subscriberMetadata.delete(subscriber) || found;\n        }\n        return found;\n    }\n    getMetadata(localizationOptions) {\n        if (!localizationOptions) {\n            const allMetadata = [];\n            let idle;\n            for (const subscriberMetadata of this.subscriberMetadata.values()) {\n                for (const metadata of subscriberMetadata) {\n                    if (IDLE_METADATA_KEY in metadata) {\n                        const subscriberIsIdle = Boolean(metadata[IDLE_METADATA_KEY]);\n                        idle = idle === undefined ? subscriberIsIdle : subscriberIsIdle && idle;\n                    }\n                    else {\n                        allMetadata.push(metadata);\n                    }\n                }\n            }\n            if (idle !== undefined) {\n                allMetadata.push({ [IDLE_METADATA_KEY]: idle ? 1 : 0 });\n            }\n            return allMetadata;\n        }\n        const metadata = [];\n        const { subscriber, markAllAsLocal } = localizationOptions;\n        for (const [fromSubscriber, subscriberMetadata] of this.subscriberMetadata) {\n            const shouldLocalizeMetadata = markAllAsLocal || fromSubscriber === subscriber;\n            const metadataToAdd = shouldLocalizeMetadata ? subscriberMetadata.map(markMetadataAsLocal) : subscriberMetadata;\n            metadata.push(...metadataToAdd);\n        }\n        return metadata;\n    }\n    hasSubscribers() {\n        return this.subscriberMetadata.size > 0;\n    }\n}\nexport class PresenceMetadataSet {\n    constructor() {\n        this.metadataByChannel = new Map();\n    }\n    setMetadata({ subscriber, channelName, metadata }) {\n        let channelMetadata = this.metadataByChannel.get(channelName);\n        if (!channelMetadata) {\n            channelMetadata = new PresenceMetadataForChannel();\n            this.metadataByChannel.set(channelName, channelMetadata);\n        }\n        channelMetadata.setMetadata(subscriber, metadata);\n    }\n    removeSubscribers(subscribers) {\n        const channelsWithSubscribers = new Set();\n        for (const [channelName, channelMetadata] of this.metadataByChannel) {\n            const channelHadSubscriber = channelMetadata.removeSubscribers(subscribers);\n            if (channelHadSubscriber) {\n                channelsWithSubscribers.add(channelName);\n            }\n            if (!channelMetadata.hasSubscribers()) {\n                this.metadataByChannel.delete(channelName);\n            }\n        }\n        return channelsWithSubscribers;\n    }\n    getChannelMetadata(channelName, localizationOptions) {\n        const channelMetadata = this.metadataByChannel.get(channelName);\n        return (channelMetadata === null || channelMetadata === void 0 ? void 0 : channelMetadata.getMetadata(localizationOptions)) || [];\n    }\n}\n","export function getPresenceKey(userId, presenceId) {\n    return `${userId}:${presenceId}`;\n}\nexport function decompressItem(data) {\n    const [presenceId, connectionCount] = data.p.split('.');\n    return {\n        userId: data.u,\n        presenceKey: getPresenceKey(data.u, presenceId),\n        connectionCount: Number(connectionCount),\n        metadata: data.m || []\n    };\n}\nconst presenceChannelPrefix = 'presence-';\nexport function isPresenceChannel(channelName) {\n    return channelName.startsWith(presenceChannelPrefix);\n}\nclass PresenceChannel {\n    constructor() {\n        this.presenceItems = new Map();\n    }\n    shouldUsePresenceItem(item) {\n        const existingItem = this.presenceItems.get(item.presenceKey);\n        return !existingItem || existingItem.connectionCount <= item.connectionCount;\n    }\n    addPresenceItem(item) {\n        if (!this.shouldUsePresenceItem(item)) {\n            return;\n        }\n        this.presenceItems.set(item.presenceKey, item);\n    }\n    removePresenceItem(item) {\n        if (!this.shouldUsePresenceItem(item)) {\n            return;\n        }\n        this.presenceItems.delete(item.presenceKey);\n    }\n    replacePresenceItems(items) {\n        this.presenceItems.clear();\n        for (const item of items) {\n            this.addPresenceItem(item);\n        }\n    }\n    getPresenceItems() {\n        return Array.from(this.presenceItems.values());\n    }\n}\nexport class AlivePresence {\n    constructor() {\n        this.presenceChannels = new Map();\n    }\n    getPresenceChannel(channelName) {\n        const channel = this.presenceChannels.get(channelName) || new PresenceChannel();\n        this.presenceChannels.set(channelName, channel);\n        return channel;\n    }\n    handleMessage(channelName, data) {\n        const channel = this.getPresenceChannel(channelName);\n        switch (data.e) {\n            case 'pf':\n                channel.replacePresenceItems(data.d.map(decompressItem));\n                break;\n            case 'pa':\n                channel.addPresenceItem(decompressItem(data.d));\n                break;\n            case 'pr':\n                channel.removePresenceItem(decompressItem(data.d));\n                break;\n        }\n        return this.getChannelItems(channelName);\n    }\n    getChannelItems(channelName) {\n        const channel = this.getPresenceChannel(channelName);\n        return channel.getPresenceItems();\n    }\n    clearChannel(channelName) {\n        this.presenceChannels.delete(channelName);\n    }\n}\n","import MultiMap from '@github/multimap';\nexport class SubscriptionSet {\n    constructor() {\n        this.subscriptions = new MultiMap();\n        this.signatures = new Map();\n    }\n    add(...subscriptions) {\n        const added = [];\n        for (const { subscriber, topic } of subscriptions) {\n            if (!this.subscriptions.has(topic.name)) {\n                added.push(topic);\n                this.signatures.set(topic.name, topic);\n            }\n            this.subscriptions.set(topic.name, subscriber);\n        }\n        return added;\n    }\n    delete(...subscriptions) {\n        const removed = [];\n        for (const { subscriber, topic } of subscriptions) {\n            const deleted = this.subscriptions.delete(topic.name, subscriber);\n            if (deleted && !this.subscriptions.has(topic.name)) {\n                removed.push(topic);\n                this.signatures.delete(topic.name);\n            }\n        }\n        return removed;\n    }\n    drain(...subscribers) {\n        const removed = [];\n        for (const subscriber of subscribers) {\n            for (const name of this.subscriptions.drain(subscriber)) {\n                const topic = this.signatures.get(name);\n                this.signatures.delete(name);\n                removed.push(topic);\n            }\n        }\n        return removed;\n    }\n    topics() {\n        return this.signatures.values();\n    }\n    topic(name) {\n        return this.signatures.get(name) || null;\n    }\n    subscribers(topic) {\n        return this.subscriptions.get(topic).values();\n    }\n}\n","export class Topic {\n    constructor(name, signed) {\n        this.name = name;\n        this.signed = signed;\n        this.offset = '';\n    }\n    static parse(data) {\n        const [content, signature] = data.split('--');\n        if (!content || !signature)\n            return null;\n        const sub = JSON.parse(atob(content));\n        if (!sub.c || !sub.t)\n            return null;\n        return new Topic(sub.c, data);\n    }\n}\n","export default class MultiMap {\n    constructor(iterable) {\n        this.map = new Map();\n        if (iterable) {\n            for (const [k, v] of iterable) {\n                this.set(k, v);\n            }\n        }\n    }\n    get(key) {\n        const values = this.map.get(key);\n        return values ? values : new Set();\n    }\n    set(key, value) {\n        let values = this.map.get(key);\n        if (!values) {\n            values = new Set();\n            this.map.set(key, values);\n        }\n        values.add(value);\n        return this;\n    }\n    has(key) {\n        return this.map.has(key);\n    }\n    delete(key, value) {\n        const values = this.map.get(key);\n        if (!values)\n            return false;\n        if (!value)\n            return this.map.delete(key);\n        const deleted = values.delete(value);\n        if (!values.size)\n            this.map.delete(key);\n        return deleted;\n    }\n    drain(value) {\n        const empty = [];\n        for (const key of this.keys()) {\n            if (this.delete(key, value) && !this.has(key)) {\n                empty.push(key);\n            }\n        }\n        return empty;\n    }\n    keys() {\n        return this.map.keys();\n    }\n    values() {\n        return this.map.values();\n    }\n    entries() {\n        return this.map.entries();\n    }\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n    clear() {\n        this.map.clear();\n    }\n    get size() {\n        return this.map.size;\n    }\n}\n","async function timeout(ms, signal) {\n    let id;\n    const done = new Promise((resolve, reject) => {\n        id = self.setTimeout(() => reject(new Error('timeout')), ms);\n    });\n    if (!signal)\n        return done;\n    try {\n        await Promise.race([done, whenAborted(signal)]);\n    }\n    catch (e) {\n        self.clearTimeout(id);\n        throw e;\n    }\n}\nasync function wait(ms, signal) {\n    let id;\n    const done = new Promise(resolve => {\n        id = self.setTimeout(resolve, ms);\n    });\n    if (!signal)\n        return done;\n    try {\n        await Promise.race([done, whenAborted(signal)]);\n    }\n    catch (e) {\n        self.clearTimeout(id);\n        throw e;\n    }\n}\nasync function retry(fn, attempts, maxDelay = Infinity, signal) {\n    const aborted = signal ? whenAborted(signal) : null;\n    for (let i = 0; i < attempts; i++) {\n        try {\n            const op = aborted ? Promise.race([fn(), aborted]) : fn();\n            return await op;\n        }\n        catch (e) {\n            if (e.name === 'AbortError')\n                throw e;\n            if (i === attempts - 1)\n                throw e;\n            const ms = Math.pow(2, i) * 1000;\n            const vary = rand(ms * 0.1);\n            await wait(Math.min(maxDelay, ms + vary), signal);\n        }\n    }\n    throw new Error('retry failed');\n}\nfunction whenAborted(signal) {\n    return new Promise((resolve, reject) => {\n        const error = new Error('aborted');\n        error.name = 'AbortError';\n        if (signal.aborted) {\n            reject(error);\n        }\n        else {\n            signal.addEventListener('abort', () => reject(error));\n        }\n    });\n}\nfunction rand(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n\nasync function connect(url, ms, signal) {\n    const socket = new WebSocket(url);\n    const opened = whenOpen(socket);\n    try {\n        await Promise.race([opened, timeout(ms, signal)]);\n        return socket;\n    }\n    catch (e) {\n        shutdown(opened);\n        throw e;\n    }\n}\nasync function shutdown(opened) {\n    try {\n        const socket = await opened;\n        socket.close();\n    }\n    catch (_a) {\n    }\n}\nfunction connectWithRetry(url, policy) {\n    const fn = () => connect(url, policy.timeout, policy.signal);\n    return retry(fn, policy.attempts, policy.maxDelay, policy.signal);\n}\nfunction whenOpen(socket) {\n    return new Promise((resolve, reject) => {\n        if (socket.readyState === WebSocket.OPEN) {\n            resolve(socket);\n        }\n        else {\n            socket.onerror = () => {\n                socket.onerror = null;\n                socket.onopen = null;\n                reject(new Error('connect failed'));\n            };\n            socket.onopen = () => {\n                socket.onerror = null;\n                socket.onopen = null;\n                resolve(socket);\n            };\n        }\n    });\n}\n\nclass StableSocket {\n    constructor(url, delegate, policy) {\n        this.socket = null;\n        this.opening = null;\n        this.url = url;\n        this.delegate = delegate;\n        this.policy = policy;\n    }\n    async open() {\n        if (this.opening || this.socket)\n            return;\n        this.opening = new AbortController();\n        const policy = Object.assign(Object.assign({}, this.policy), { signal: this.opening.signal });\n        try {\n            this.socket = await connectWithRetry(this.url, policy);\n        }\n        catch (_a) {\n            this.delegate.socketDidFinish(this);\n            return;\n        }\n        finally {\n            this.opening = null;\n        }\n        this.socket.onclose = (event) => {\n            this.socket = null;\n            this.delegate.socketDidClose(this, event.code, event.reason);\n            const fatal = this.delegate.socketShouldRetry\n                ? !this.delegate.socketShouldRetry(this, event.code)\n                : isFatal(event.code);\n            if (fatal) {\n                this.delegate.socketDidFinish(this);\n            }\n            else {\n                setTimeout(() => this.open(), rand$1(100, 100 + (this.delegate.reconnectWindow || 50)));\n            }\n        };\n        this.socket.onmessage = (event) => {\n            this.delegate.socketDidReceiveMessage(this, event.data);\n        };\n        this.delegate.socketDidOpen(this);\n    }\n    close(code, reason) {\n        if (this.opening) {\n            this.opening.abort();\n            this.opening = null;\n        }\n        else if (this.socket) {\n            this.socket.onclose = null;\n            this.socket.close(code, reason);\n            this.socket = null;\n            this.delegate.socketDidClose(this, code, reason);\n            this.delegate.socketDidFinish(this);\n        }\n    }\n    send(data) {\n        if (this.socket) {\n            this.socket.send(data);\n        }\n    }\n    isOpen() {\n        return !!this.socket;\n    }\n}\nfunction rand$1(min, max) {\n    return Math.random() * (max - min) + min;\n}\nfunction isFatal(code) {\n    return code === POLICY_VIOLATION || code === INTERNAL_ERROR;\n}\nconst POLICY_VIOLATION = 1008;\nconst INTERNAL_ERROR = 1011;\n\nclass BufferedSocket {\n    constructor(socket) {\n        this.buf = [];\n        this.socket = socket;\n        this.delegate = socket.delegate;\n        socket.delegate = this;\n    }\n    open() {\n        return this.socket.open();\n    }\n    close(code, reason) {\n        this.socket.close(code, reason);\n    }\n    send(data) {\n        if (this.socket.isOpen()) {\n            this.flush();\n            this.socket.send(data);\n        }\n        else {\n            this.buf.push(data);\n        }\n    }\n    isOpen() {\n        return this.socket.isOpen();\n    }\n    flush() {\n        for (const data of this.buf) {\n            this.socket.send(data);\n        }\n        this.buf.length = 0;\n    }\n    socketDidOpen(socket) {\n        this.flush();\n        this.delegate.socketDidOpen(socket);\n    }\n    socketDidClose(socket, code, reason) {\n        this.delegate.socketDidClose(socket, code, reason);\n    }\n    socketDidFinish(socket) {\n        this.delegate.socketDidFinish(socket);\n    }\n    socketDidReceiveMessage(socket, message) {\n        this.delegate.socketDidReceiveMessage(socket, message);\n    }\n    socketShouldRetry(socket, code) {\n        return this.delegate.socketShouldRetry ? this.delegate.socketShouldRetry(socket, code) : !isFatal(code);\n    }\n}\n\nexport { BufferedSocket, StableSocket, connect, connectWithRetry };\n"],"names":["throttle","callback","wait","start","middle","once","timer","last","cancelled","fn","args","delta","Date","now","apply","cancel","clearTimeout","setTimeout","debounce","SocketDisconnectReasons","generatePresenceId","Math","round","random","getUserIdFromSocketUrl","url","match","AliveSession","constructor","getUrl","inSharedWorker","notify","maxReconnectBackoff","subscriptions","state","retrying","connectionCount","presence","presenceMetadata","intentionallyDisconnected","lastCameOnline","userId","presenceId","presenceKey","socket","connect","subscribe","added","add","subscription","sendSubscribe","channel","topic","name","notifyCachedPresence","subscriber","unsubscribe","removed","delete","sendUnsubscribe","unsubscribeAll","subscribers","drain","updatedPresenceChannels","removeSubscribers","sendPresenceMetadataUpdate","requestPresence","channels","presenceItems","getChannelItems","length","notifyPresenceChannel","updatePresenceMetadata","metadataUpdates","updatedChannels","Set","update","setMetadata","channelName","channelNames","size","topics","push","online","_a","abort","open","offline","close","shutdown","self","reconnectWindow","wasRecentlyOffline","socketDidOpen","getUrlWithPresenceId","socketDidClose","code","reason","undefined","redeployEarlyReconnectTimeout","reconnectDelayMinutes","socketDidFinish","reconnect","socketDidReceiveMessage","_","message","payload","JSON","parse","e","handleAck","handleMessage","ack","offset","off","msg","ch","data","type","_b","userPresenceById","Map","presenceItem","metadata","userPresence","get","isOwnUser","isIdle","Boolean","set","otherUsers","Array","from","values","filter","user","ownUserRemoteMetadata","ownUserLocalMetadata","getChannelMetadata","markAllAsLocal","AbortController","Infinity","signal","liveUrl","URL","location","origin","searchParams","toString","timeout","attempts","entries","slice","signed","stringify","send","t","clearChannel","whenAborted","Promise","resolve","reject","error","aborted","addEventListener","ms","id","done","race","rand","max","floor","retry","maxDelay","i","op","pow","vary","min","eachSlice","IDLE_METADATA_KEY","markMetadataAsLocal","Object","assign","isLocal","PresenceMetadataForChannel","subscriberMetadata","value","found","getMetadata","localizationOptions","idle","allMetadata","subscriberIsIdle","fromSubscriber","shouldLocalizeMetadata","metadataToAdd","map","hasSubscribers","PresenceMetadataSet","metadataByChannel","channelMetadata","channelsWithSubscribers","channelHadSubscriber","getPresenceKey","decompressItem","p","split","u","Number","m","isPresenceChannel","startsWith","PresenceChannel","shouldUsePresenceItem","item","existingItem","addPresenceItem","removePresenceItem","replacePresenceItems","items","clear","getPresenceItems","AlivePresence","presenceChannels","getPresenceChannel","d","SubscriptionSet","signatures","has","deleted","Topic","content","signature","sub","atob","c","MultiMap","iterable","k","v","key","empty","keys","Symbol","iterator","WebSocket","opened","whenOpen","connectWithRetry","policy","readyState","OPEN","onerror","onopen","StableSocket","delegate","opening","onclose","event","fatal","socketShouldRetry","isFatal","rand$1","onmessage","isOpen","POLICY_VIOLATION","INTERNAL_ERROR"],"sourceRoot":""}