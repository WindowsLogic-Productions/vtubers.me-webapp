{"version":3,"file":"app_assets_modules_github_behaviors_commenting_edit_ts-app_assets_modules_github_behaviors_ht-83c235-xxxxxxxxxxxx.js","mappings":"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","sources":["app/assets/modules/github/behaviors/commenting/edit.ts","app/assets/modules/github/behaviors/html-validation.ts"],"sourcesContent":["// Commenting: Edit and delete buttons\n\n// eslint-disable-next-line no-restricted-imports\nimport {fire, on} from 'delegated-events'\nimport IncludeFragmentElement from '@github/include-fragment-element'\n\nimport {dialog} from '../../details-dialog'\nimport {fetchSafeDocumentFragment} from '../../fetch'\nimport {fromEvent} from '@github-ui/subscription'\nimport {hasDirtyFields, hasInteractions} from '../../has-interactions'\n// eslint-disable-next-line no-restricted-imports\nimport {observe} from '@github/selector-observer'\nimport {remoteForm} from '@github/remote-form'\nimport {updateContent} from '../../updatable-content'\n\nlet bodyErrors: string[] = []\n\n// Preload the edit form fragment when the dropdown menu is loaded\nobserve('.js-comment-header-actions-deferred-include-fragment', {\n  subscribe: el =>\n    fromEvent(\n      el,\n      'loadstart',\n      () => {\n        const container = el.closest<HTMLElement>('.js-comment')!\n        loadEditFormDeferredIncludeFragment(container)\n      },\n      {capture: false, once: true},\n    ),\n})\n\n// If the comment contains a task list we need to immediately load the edit form\n// because it's used to decide if the user can edit tasks in the list or not\nobserve('.js-comment .contains-task-list', {\n  add: el => {\n    const container = el.closest<HTMLElement>('.js-comment')!\n    loadEditFormDeferredIncludeFragment(container)\n  },\n})\n\n// Edit button\non('click', '.js-comment-edit-button', function (event) {\n  const container = event.currentTarget.closest<HTMLElement>('.js-comment')!\n  container.classList.add('is-comment-editing')\n\n  // Focus on the edit form when it is loaded\n  const editFormIncludeFragment = findEditFormDeferredIncludeFragment(container)\n  if (!editFormIncludeFragment) {\n    // Edit form is already loaded into the DOM so just focus on it\n    focusEditForm(container)\n  } else {\n    // If an <include-fragment> exists, wait till it's loaded before focusing\n    editFormIncludeFragment.addEventListener('include-fragment-replaced', () => focusEditForm(container), {once: true})\n  }\n\n  const dropdown = event.currentTarget.closest('.js-dropdown-details')\n  if (dropdown) {\n    dropdown.removeAttribute('open')\n  }\n})\n\nfunction focusEditForm(container: HTMLElement) {\n  container.querySelector<HTMLElement>('.js-write-tab')!.click()\n  const field = container.querySelector<HTMLElement>('.js-comment-field')!\n  ;(field as HTMLTextAreaElement).focus()\n  // Trigger size-to-fit (see #15696)\n  fire(field, 'change')\n}\n\nfunction findEditFormDeferredIncludeFragment(container: HTMLElement) {\n  return container.querySelector<IncludeFragmentElement>('.js-comment-edit-form-deferred-include-fragment')\n}\n\n// By default the edit form include fragment is set to `loading=lazy` to avoid triggering\n// loading on pageload, however sometimes we want to pre-emptively load it\nfunction loadEditFormDeferredIncludeFragment(container: HTMLElement) {\n  findEditFormDeferredIncludeFragment(container)?.setAttribute('loading', 'eager')\n}\n\n// Show minimize form button\non('click', '.js-comment-hide-button', function (event) {\n  const comment = event.currentTarget.closest<HTMLElement>('.js-comment')!\n  toggleMinimizeError(comment, false)\n  const minimizeForm = comment.querySelector('.js-minimize-comment')\n  /* eslint-disable-next-line github/no-d-none */\n  if (minimizeForm) minimizeForm.classList.remove('d-none')\n\n  const dropdown = event.currentTarget.closest('.js-dropdown-details')\n  if (dropdown) {\n    dropdown.removeAttribute('open')\n  }\n})\n\n// Hide minimize form button\non('click', '.js-comment-hide-minimize-form', function (event) {\n  const minimizeForm = event.currentTarget.closest<HTMLElement>('.js-minimize-comment')!\n  /* eslint-disable-next-line github/no-d-none */\n  minimizeForm.classList.add('d-none')\n})\n\n// Comment Cancel button\nexport function handleCommentCancelButtonClick(event: Event & {currentTarget: Element}) {\n  const form = event.currentTarget.closest<HTMLFormElement>('form')!\n  const confirmText = event.currentTarget.getAttribute('data-confirm-text')!\n  if (hasDirtyFields(form) && !confirm(confirmText)) {\n    return false\n  }\n\n  for (const field of form.querySelectorAll('input, textarea')) {\n    const fieldEl = field as HTMLInputElement | HTMLTextAreaElement\n    fieldEl.value = fieldEl.defaultValue\n\n    if (fieldEl.classList.contains('session-resumable-canceled')) {\n      fieldEl.classList.add('js-session-resumable')\n      fieldEl.classList.remove('session-resumable-canceled')\n    }\n  }\n\n  const comment = event.currentTarget.closest('.js-comment')\n  if (comment) {\n    comment.classList.remove('is-comment-editing')\n  }\n\n  return true\n}\non('click', '.js-comment-cancel-button', handleCommentCancelButtonClick)\n\n// Issue edit cancel\non('click', '.js-cancel-issue-edit', function (event) {\n  const container = event.currentTarget.closest<HTMLElement>('.js-details-container')!\n  container.querySelector<HTMLElement>('.js-comment-form-error')!.hidden = true\n})\n\n// Show loading state for updating, deleting, minimizing, and unminimizing\n// Add version so server can decide if we're working with fresh data\nremoteForm(\n  '.js-comment-delete, .js-comment .js-comment-update, .js-issue-update, .js-comment-minimize, .js-comment-unminimize',\n  function (form, wants, request) {\n    const comment = form.closest<HTMLElement>('.js-comment')!\n    comment.classList.add('is-comment-loading')\n    const bodyVersion = comment.getAttribute('data-body-version')\n    if (bodyVersion) {\n      request.headers.set('X-Body-Version', bodyVersion)\n    }\n  },\n)\n\n// Rejected updates that are stale freezes the form and shows an error.\n// See AbstractRepositoryController#render_stale_error for stale error response.\nremoteForm('.js-comment .js-comment-update', async function (form, wants) {\n  let response\n  const comment = form.closest<HTMLElement>('.js-comment')!\n  const updateError = comment.querySelector('.js-comment-update-error')\n  const bodyError = comment.querySelector('.js-comment-body-error')\n  if (updateError instanceof HTMLElement) {\n    updateError.hidden = true\n  }\n  if (bodyError instanceof HTMLElement) {\n    bodyError.hidden = true\n  }\n  bodyErrors = []\n\n  // Prevent live updates while the form is submitting.\n  form.classList.add('is-dirty')\n\n  try {\n    response = await wants.json()\n  } catch (error) {\n    // @ts-expect-error catch blocks are bound to `unknown` so we need to validate the type before using it\n    if (error.response.status === 422) {\n      // @ts-expect-error catch blocks are bound to `unknown` so we need to validate the type before using it\n      const data = JSON.parse(error.response.text)\n\n      if (data.errors) {\n        if (updateError instanceof HTMLElement) {\n          // eslint-disable-next-line i18n-text/no-en\n          updateError.textContent = `There was an error posting your comment: ${data.errors.join(', ')}`\n          updateError.hidden = false\n        }\n        return\n      }\n    } else {\n      throw error\n    }\n  } finally {\n    form.classList.remove('is-dirty')\n  }\n\n  if (!response) return\n  const data = response.json\n\n  if (data.errors && data.errors.length > 0) {\n    bodyErrors = data.errors\n    showBodyErrors(bodyError as HTMLElement)\n  }\n\n  const commentBody = comment.querySelector('.js-comment-body')\n  const trackingBlockDirty =\n    commentBody != null &&\n    form.hasAttribute('data-submitting-tracking-block-update') &&\n    hasInteractions(commentBody, true, true)\n\n  if (commentBody && data.body && !trackingBlockDirty) {\n    commentBody.innerHTML = data.body\n  }\n  if (data.source != null) {\n    const commentField = comment.querySelector<HTMLTextAreaElement>('.js-comment-field')\n    if (commentField) {\n      commentField.defaultValue = data.source\n\n      // Only update the markdown if the tracking block has not already updated it.\n      if (!trackingBlockDirty) {\n        commentField.value = data.source\n      }\n    }\n    // if the issue is a PR, update the merge commit message with the updated body text\n    if (data.default_merge_commit_message) {\n      if (document.querySelector('.js-merge-pr.is-merging')) {\n        const mergeFieldMessage = document.querySelector('.js-merge-pull-request textarea')\n        if (\n          mergeFieldMessage instanceof HTMLTextAreaElement &&\n          mergeFieldMessage.value === mergeFieldMessage.defaultValue\n        ) {\n          mergeFieldMessage.value = mergeFieldMessage.defaultValue = data.default_merge_commit_message\n        }\n      }\n      if (data.default_squash_commit_message) {\n        if (document.querySelector('.js-merge-pr.is-squashing')) {\n          const mergeFieldMessage = document.querySelector('.js-merge-pull-request textarea')\n          if (\n            mergeFieldMessage instanceof HTMLTextAreaElement &&\n            mergeFieldMessage.value === mergeFieldMessage.defaultValue\n          ) {\n            mergeFieldMessage.value = mergeFieldMessage.defaultValue = data.default_squash_commit_message\n          }\n        }\n      }\n    }\n    document\n      .querySelector('.js-merge-box-button-merge')\n      ?.setAttribute('data-input-message-value', data.default_merge_commit_message)\n\n    document\n      .querySelector('.js-merge-box-button-squash')\n      ?.setAttribute('data-input-message-value', data.default_squash_commit_message)\n  }\n\n  comment.setAttribute('data-body-version', data.newBodyVersion)\n  const bodyVersionInput = comment.querySelector('.js-body-version')\n  if (bodyVersionInput instanceof HTMLInputElement) {\n    bodyVersionInput.value = data.newBodyVersion\n  }\n\n  const discussionPoll = comment.querySelector('.js-discussion-poll')\n  if (discussionPoll && data.poll) {\n    discussionPoll.innerHTML = data.poll\n  }\n\n  for (const field of comment.querySelectorAll('input, textarea')) {\n    const fieldEl = field as HTMLInputElement | HTMLTextAreaElement\n    fieldEl.defaultValue = fieldEl.value\n  }\n\n  // If the comment was previously stale, remove the warning as it is now fresh\n  comment.classList.remove('is-comment-stale')\n\n  // Only leave edit mode if the user manually submitted the form.\n  if (!form.hasAttribute('data-submitting-tracking-block-update')) {\n    comment.classList.remove('is-comment-editing')\n  }\n\n  const edits = comment.querySelector('.js-comment-edit-history')\n  if (edits) {\n    const html = await fetchSafeDocumentFragment(document, data.editUrl)\n    edits.textContent = ''\n    edits.append(html)\n  }\n})\n\n// this block will show the error block if there were errors on body modification\nobserve('.js-comment-body-error', {\n  add: el => {\n    if (bodyErrors && bodyErrors.length > 0) {\n      showBodyErrors(el as HTMLElement)\n    }\n  },\n})\n\nfunction showBodyErrors(el: HTMLElement) {\n  const ol = el.querySelector('ol')\n  if (ol) {\n    ol.textContent = ''\n    const items = bodyErrors.map(e => {\n      const li = document.createElement('li')\n      li.textContent = e\n      return li\n    })\n    for (const li of items) {\n      ol.appendChild(li)\n    }\n  }\n  el.hidden = false\n}\n\n// Hide loading state for updating, deleting, minimizing, and unminimizing\nremoteForm(\n  '.js-comment .js-comment-delete, .js-comment .js-comment-update, .js-comment-minimize, .js-comment-unminimize',\n  async function (form, wants) {\n    const comment = form.closest<HTMLElement>('.js-comment')!\n    let error\n\n    try {\n      await wants.text()\n    } catch (err) {\n      error = err\n      // @ts-expect-error catch blocks are bound to `unknown` so we need to validate the type before using it\n      if (error.response.status === 422) {\n        let data\n        try {\n          // @ts-expect-error catch blocks are bound to `unknown` so we need to validate the type before using it\n          data = JSON.parse(error.response.text)\n        } catch (e) {\n          // Do nothing\n        }\n\n        if (data && data.stale) comment.classList.add('is-comment-stale')\n      } else {\n        throw error\n      }\n    } finally {\n      form.dispatchEvent(new CustomEvent('submit:complete', {bubbles: true, detail: {error}}))\n    }\n\n    comment.classList.remove('is-comment-loading')\n  },\n)\n\nfunction toggleMinimizeError(comment: HTMLElement, errored: boolean) {\n  const minimizeError = comment.querySelector<HTMLElement>('.js-comment-show-on-error')\n  if (minimizeError) {\n    minimizeError.hidden = !errored\n  }\n  const minimizeForm = comment.querySelector<HTMLElement>('.js-comment-hide-on-error')\n  if (minimizeForm) {\n    minimizeForm.hidden = errored\n  }\n}\n\nremoteForm('.js-timeline-comment-unminimize, .js-timeline-comment-minimize', async function (form, wants) {\n  const comment = form.closest<HTMLElement>('.js-minimize-container')!\n  try {\n    const response = await wants.html()\n    comment.replaceWith(response.html)\n  } catch (error) {\n    toggleMinimizeError(comment, true)\n  }\n})\n\nremoteForm('.js-discussion-comment-unminimize, .js-discussion-comment-minimize', async function (form, wants) {\n  const comment = form.closest<HTMLElement>('.js-discussion-comment')!\n  const minimizeError = comment.querySelector<HTMLElement>('.js-discussion-comment-error')\n  if (minimizeError) {\n    minimizeError.hidden = true\n  }\n\n  try {\n    const response = await wants.html()\n    comment.replaceWith(response.html)\n  } catch (error) {\n    // @ts-expect-error catch blocks are bound to `unknown` so we need to validate the type before using it\n    if (error.response.status >= 400 && error.response.status < 500) {\n      // @ts-expect-error catch blocks are bound to `unknown` so we need to validate the type before using it\n      if (error.response.html) {\n        // @ts-expect-error catch blocks are bound to `unknown` so we need to validate the type before using it\n        const errorMessage = error.response.html.querySelector('.js-discussion-comment')!.getAttribute('data-error')!\n        if (minimizeError instanceof HTMLElement) {\n          minimizeError.textContent = errorMessage\n          minimizeError.hidden = false\n        }\n      }\n    } else {\n      throw error\n    }\n  }\n})\n\n// Remove comment if deleted successfully\nremoteForm('.js-comment-delete', async function (form, wants) {\n  await wants.json()\n  let container = form.closest('.js-comment-delete-container')\n\n  if (!container) {\n    container = form.closest('.js-comment-container') || form.closest('.js-line-comments')\n\n    if (container && container.querySelectorAll('.js-comment').length !== 1) {\n      container = form.closest<HTMLElement>('.js-comment')!\n    }\n  }\n\n  const thread = container?.closest('.js-comment-container') || container?.closest('.js-line-comments')\n\n  container?.remove()\n\n  if (thread && thread.querySelectorAll('.js-comment').length === 1) {\n    for (const x of thread.querySelectorAll('.js-delete-on-last-reply-deleted')) {\n      x.remove()\n    }\n  }\n})\n\n// Update issue/PR/discussion title if successful\nremoteForm('.js-issue-update', async function (form, wants) {\n  const container = form.closest<HTMLElement>('.js-details-container')!\n  const errorDisplay = container.querySelector<HTMLElement>('.js-comment-form-error')!\n\n  let response\n  try {\n    response = await wants.json()\n  } catch (error) {\n    // @ts-expect-error catch blocks are bound to `unknown` so we need to validate the type before using it\n    // eslint-disable-next-line i18n-text/no-en\n    errorDisplay.textContent = error.response?.json?.errors?.[0] || 'Something went wrong. Please try again.'\n    errorDisplay.hidden = false\n  }\n\n  if (!response) return\n\n  container.classList.remove('open')\n  errorDisplay.hidden = true\n  const data = response.json\n  if (data.issue_title != null) {\n    container.querySelector<HTMLElement>('.js-issue-title')!.textContent = data.issue_title\n    const issuesContainer = container.closest('.js-issues-results')\n    if (issuesContainer) {\n      if (issuesContainer.querySelector('.js-merge-pr.is-merging')) {\n        const mergeFieldTitle = issuesContainer.querySelector('.js-merge-pull-request .js-merge-title')\n        if (mergeFieldTitle instanceof HTMLInputElement && mergeFieldTitle.value === mergeFieldTitle.defaultValue) {\n          mergeFieldTitle.value = mergeFieldTitle.defaultValue = data.default_merge_commit_title\n        }\n      } else if (issuesContainer.querySelector('.js-merge-pr.is-squashing')) {\n        const mergeFieldTitle = issuesContainer.querySelector('.js-merge-pull-request .js-merge-title')\n        if (mergeFieldTitle instanceof HTMLInputElement && mergeFieldTitle.value === mergeFieldTitle.defaultValue) {\n          mergeFieldTitle.value = mergeFieldTitle.defaultValue = data.default_squash_commit_title\n        }\n      }\n\n      const mergeButton = issuesContainer.querySelector('button[value=merge]')\n      if (mergeButton) {\n        mergeButton.setAttribute('data-input-title-value', data.default_merge_commit_title)\n      }\n\n      const squashInput = issuesContainer.querySelector('button[value=squash]')\n      if (squashInput) {\n        squashInput.setAttribute('data-input-title-value', data.default_squash_commit_title)\n      }\n    }\n  }\n  document.title = data.page_title\n  for (const field of form.elements) {\n    if (field instanceof HTMLInputElement || field instanceof HTMLTextAreaElement) {\n      field.defaultValue = field.value\n    }\n  }\n})\n\n// Hide comment if minimized successfully\nremoteForm('.js-comment-minimize', async function (form, wants) {\n  await wants.json()\n  const comment = form.closest<HTMLElement>('.js-comment')!\n\n  const minimizeForm = comment.querySelector('.js-minimize-comment')\n\n  if (minimizeForm && minimizeForm.classList.contains('js-update-minimized-content')) {\n    const submitButton = form.querySelector<HTMLInputElement | HTMLButtonElement>(\n      'input[type=submit], button[type=submit]',\n    )\n\n    if (submitButton) {\n      submitButton.classList.add('disabled')\n    }\n    const updatableCommentContainer = comment.closest<HTMLElement>('.js-comment-container')\n    if (updatableCommentContainer) {\n      await updateContent(updatableCommentContainer)\n    }\n  } else {\n    /* eslint-disable-next-line github/no-d-none */\n    if (minimizeForm) minimizeForm.classList.add('d-none')\n    const unminimizedComment = form.closest<HTMLElement>('.unminimized-comment')!\n    /* eslint-disable-next-line github/no-d-none */\n    unminimizedComment.classList.add('d-none')\n    unminimizedComment.classList.remove('js-comment')\n\n    const commentGroup = form.closest<HTMLElement>('.js-minimizable-comment-group')!\n    const minimizedComment = commentGroup.querySelector('.minimized-comment')\n    /* eslint-disable-next-line github/no-d-none */\n    if (minimizedComment) minimizedComment.classList.remove('d-none')\n    if (minimizedComment) minimizedComment.classList.add('js-comment')\n  }\n})\n\n// Show comment if unminimized successfully\nremoteForm('.js-comment-unminimize', async function (form, wants) {\n  await wants.json()\n  const commentGroup = form.closest<HTMLElement>('.js-minimizable-comment-group')!\n  const unminimizedComment = commentGroup.querySelector('.unminimized-comment')\n  const minimizedComment = commentGroup.querySelector('.minimized-comment')\n\n  if (unminimizedComment) {\n    /* eslint-disable-next-line github/no-d-none */\n    unminimizedComment.classList.remove('d-none')\n    unminimizedComment.classList.add('js-comment')\n\n    /* eslint-disable-next-line github/no-d-none */\n    if (minimizedComment) minimizedComment.classList.add('d-none')\n    if (minimizedComment) minimizedComment.classList.remove('js-comment')\n  } else {\n    // if the unminimizedComment is not present at this point,\n    // try to fetch it from the server\n    if (minimizedComment) {\n      const actionForm = minimizedComment.querySelector('.timeline-comment-actions')\n      // hide form while waiting for updated content\n      /* eslint-disable-next-line github/no-d-none */\n      if (actionForm) actionForm.classList.add('d-none')\n      minimizedComment.classList.remove('js-comment')\n    }\n\n    const updatableCommentContainer = commentGroup.closest<HTMLElement>('.js-comment-container')!\n    await updateContent(updatableCommentContainer)\n  }\n})\n\non(\n  'details-menu-select',\n  '.js-comment-edit-history-menu',\n  event => {\n    const url = (event as CustomEvent).detail.relatedTarget.getAttribute('data-edit-history-url')\n    if (!url) return\n    // Prevent menu from closing\n    event.preventDefault()\n    const content = fetchSafeDocumentFragment(document, url)\n    dialog({\n      content,\n      dialogClass: 'Box-overlay--wide overflow-visible',\n      errorMessage: \"Couldn't display edit history diff\",\n    })\n  },\n  {capture: true},\n)\n","import {onFocus, onInput} from '../onfocus'\n// eslint-disable-next-line no-restricted-imports\nimport {observe} from '@github/selector-observer'\n// eslint-disable-next-line no-restricted-imports\nimport {on} from 'delegated-events'\n\nconst supportedFields = [\n  'input[pattern]',\n  'input[required]',\n  'textarea[required]',\n  'input[data-required-change]',\n  'textarea[data-required-change]',\n  'input[data-required-value]',\n  'textarea[data-required-value]',\n].join(',')\n\ntype Field = HTMLInputElement | HTMLTextAreaElement\n\nfunction checkValidityForRequiredValueField(field: Field) {\n  const requiredValue = field.getAttribute('data-required-value')!\n  const prefix = field.getAttribute('data-required-value-prefix')\n\n  if (field.value === requiredValue) {\n    field.setCustomValidity('')\n  } else {\n    let message = requiredValue\n    if (prefix) {\n      message = prefix + message\n    }\n    field.setCustomValidity(message)\n  }\n}\n\nonInput('[data-required-value]', function (event) {\n  const field = event.currentTarget as Field\n  checkValidityForRequiredValueField(field)\n})\n\non('change', '[data-required-value]', function (event) {\n  const field = event.currentTarget as Field\n  checkValidityForRequiredValueField(field)\n\n  // We need to call validate since we don't fire a `change` event on the form\n  // when session-resume dumps the text back into the field.\n  validate(field.form!)\n})\n\nonInput('[data-required-trimmed]', function (event) {\n  const field = event.currentTarget as Field\n  if (field.value.trim() === '') {\n    field.setCustomValidity(field.getAttribute('data-required-trimmed')!)\n  } else {\n    field.setCustomValidity('')\n  }\n})\n\non('change', '[data-required-trimmed]', function (event) {\n  const field = event.currentTarget as Field\n  if (field.value.trim() === '') {\n    field.setCustomValidity(field.getAttribute('data-required-trimmed')!)\n  } else {\n    field.setCustomValidity('')\n  }\n\n  // We need to call validate since we don't fire a `change` event on the form\n  // when session-resume dumps the text back into the field.\n  validate(field.form!)\n})\n\n// Observe required fields and validate form when their validation state\n// changes.\nonFocus(supportedFields, field => {\n  let previousValid = (field as Field).checkValidity()\n  function inputHandler() {\n    const currentValid = (field as Field).checkValidity()\n    if (currentValid !== previousValid && (field as Field).form) {\n      validate((field as Field).form!)\n    }\n    previousValid = currentValid\n  }\n\n  field.addEventListener('input', inputHandler)\n  field.addEventListener('blur', function blurHandler() {\n    field.removeEventListener('input', inputHandler)\n    field.removeEventListener('blur', blurHandler)\n  })\n})\n\nconst installedForms = new WeakMap()\n\n// Install validation handlers on a form.\nfunction installHandlers(form: HTMLFormElement) {\n  if (installedForms.get(form)) return\n  form.addEventListener('change', () => validate(form))\n  installedForms.set(form, true)\n}\n\n// Validate a form or input.\nexport function validate(form: HTMLInputElement | HTMLFormElement) {\n  const validity = form.checkValidity()\n  for (const button of form.querySelectorAll<HTMLButtonElement>('button[data-disable-invalid]')) {\n    button.disabled = !validity\n  }\n}\n\nobserve('button[data-disable-invalid]', {\n  constructor: HTMLButtonElement,\n  initialize(button) {\n    const form = button.form\n    if (form) {\n      installHandlers(form)\n      button.disabled = !form.checkValidity()\n    }\n  },\n})\n\n// A custom attribute similar to `required`, but only passes validation once\n// the value of the field has changed from its initial value.\nobserve('input[data-required-change], textarea[data-required-change]', function (element) {\n  const field = element as Field\n  const radioInputDefault =\n    field.type === 'radio' && field.form ? (field.form.elements.namedItem(field.name) as RadioNodeList).value : null\n\n  // Custom Validity Event Handler.\n  function customValidity(event?: Event) {\n    const form = field.form!\n    if (event && field.type === 'radio' && form && radioInputDefault) {\n      for (const radio of form.elements.namedItem(field.name) as RadioNodeList) {\n        if (radio instanceof HTMLInputElement) {\n          radio.setCustomValidity(field.value === radioInputDefault ? 'unchanged' : '')\n        }\n      }\n    } else {\n      field.setCustomValidity(field.value === (radioInputDefault || field.defaultValue) ? 'unchanged' : '')\n    }\n  }\n\n  field.addEventListener('input', customValidity)\n  field.addEventListener('change', customValidity)\n  customValidity()\n\n  if (field.form) {\n    validate(field.form)\n  }\n})\n\ndocument.addEventListener('reset', function (event: Event) {\n  if (event.target instanceof HTMLFormElement) {\n    const form = event.target\n    setTimeout(() => validate(form))\n  }\n})\n"],"names":["bodyErrors","focusEditForm","container","querySelector","click","field","focus","fire","findEditFormDeferredIncludeFragment","loadEditFormDeferredIncludeFragment","setAttribute","handleCommentCancelButtonClick","event","form","currentTarget","closest","confirmText","getAttribute","hasDirtyFields","confirm","querySelectorAll","fieldEl","value","defaultValue","classList","contains","add","remove","comment","showBodyErrors","el","ol","textContent","items","map","e","li","document","createElement","appendChild","hidden","toggleMinimizeError","errored","minimizeError","minimizeForm","observe","subscribe","fromEvent","capture","once","on","editFormIncludeFragment","addEventListener","dropdown","removeAttribute","remoteForm","wants","request","bodyVersion","headers","set","response","updateError","bodyError","HTMLElement","json","error","status","data","JSON","parse","text","errors","join","length","commentBody","trackingBlockDirty","hasAttribute","hasInteractions","body","innerHTML","source","commentField","default_merge_commit_message","mergeFieldMessage","HTMLTextAreaElement","default_squash_commit_message","newBodyVersion","bodyVersionInput","HTMLInputElement","discussionPoll","poll","edits","html","fetchSafeDocumentFragment","editUrl","append","err","stale","dispatchEvent","CustomEvent","bubbles","detail","replaceWith","errorMessage","thread","x","errorDisplay","issue_title","issuesContainer","mergeFieldTitle","default_merge_commit_title","default_squash_commit_title","mergeButton","squashInput","title","page_title","elements","submitButton","updatableCommentContainer","updateContent","unminimizedComment","commentGroup","minimizedComment","actionForm","url","relatedTarget","preventDefault","content","dialog","dialogClass","checkValidityForRequiredValueField","requiredValue","prefix","setCustomValidity","message","onInput","validate","trim","onFocus","previousValid","checkValidity","inputHandler","currentValid","blurHandler","removeEventListener","installedForms","WeakMap","installHandlers","get","validity","button","disabled","constructor","HTMLButtonElement","initialize","element","radioInputDefault","type","namedItem","name","customValidity","radio","target","HTMLFormElement","setTimeout"],"sourceRoot":""}